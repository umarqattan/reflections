How is the staging area different from the working directory and the repository? What value do you think it offers?

    The staging area provides the user to save only the file that he believes
    are necessary to commit. This way, the user makes his commit more meaning-
    ful. I like being able to choose my own path.

How can you use the staging area to make sure you have one commit per logical change?

    For every staging area created by git add [file], I can make a commit. 
    Each time I make a commit to a staged file, the staging area clear up,
    allowing me the opportunity to make more logical commits rather than
    simply commiting everytime I make a change to the code.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
     
     Branches are a great tool to experiment with new changes to a working project.
     If a user wanted to make a significant change to the mechanics of a game, for 
     example, he could make a new branch indicating the change with the following:
     	      
	      git branch [new_branch_name]
     
     Then he can checkout the new branch with the following:

     	      git checkout [new_branch_name]
     
     Afterward, he can make changes to a file and add any logical changes by adding
     the file to the staging area and committing it.

How do the diagrams help you visualize the branch structure?

    Drawing a diagram of the repository history makes it easy to visualize branching.
    It helps by knowing that each new branch created can be independent of the curr-
    ent path of the project. If a new branch is created and checked out, it has no
    effect on the project, that is, unless it's merged. On the diagram, a new branch
    that hasn't been merged is indicated by a source node, that is, with 0 arrows 
    pointing to it. 
                                                               [first_branch]
                                                                     |
                                                                     V
    [first_commit] --> [second_commit] --> [third_commit] --> [latest_commit]
    		              
What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

     When two branches are merged, a new branch is created whose outward edges point in
     the direction between the two branches that were merged. That is, the new branch
     can traverse through either of the old, distinct branches. The differences between
     two separate branches and a combined branch is that both branches can be 
     traversed and they are differentiated by timestamps. Since branches formed by mer-
     ging two branches are the latest commits to the git repository, they are drawn as
     a node whose outward edges point to the previous two children nodes distinguished
     by branches.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

     Automatic merging may have problems when innappropriate things occur, such as
     making an artificially intelligent resolution that was not intended. However,
     at times, it is quite convenient to have an automatic merge resolver. Manually 
     merging may seem annoying at first, but doing so makes both people working on
     separate branches collaborate more, making sure conflicts are resolved as intended.
